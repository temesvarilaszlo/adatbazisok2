-- Particionálás tartományok alapján
CREATE TABLE eladasok (szla_szam   NUMBER(5), 
                       szla_nev    CHAR(30), 
                       mennyiseg   NUMBER(6), 
                       het         INTEGER ) 
PARTITION BY RANGE (het)  
 (PARTITION negyedev1  VALUES LESS THAN (13) SEGMENT CREATION IMMEDIATE 
    STORAGE(INITIAL 8K NEXT 8K) TABLESPACE users, 
  PARTITION negyedev2  VALUES LESS THAN (26) SEGMENT CREATION IMMEDIATE 
    STORAGE(INITIAL 8K NEXT 8K) TABLESPACE example, 
  PARTITION negyedev3  VALUES LESS THAN (39) SEGMENT CREATION IMMEDIATE  
    STORAGE(INITIAL 8K NEXT 8K) TABLESPACE users)
;

insert into eladasok values(100, 'Sport cikkek', 231, 2);
insert into eladasok values(101, 'Irodai termekek', 1200, 3);
insert into eladasok values(102, 'Eszkozok', 43, 4);
insert into eladasok values(103, 'Gepek', 21, 6);
insert into eladasok values(104, 'Butorok', 31, 7);
insert into eladasok values(105, 'Ingatlan', 3, 8);
insert into eladasok values(106, 'Szolgaltatasok', 200, 9);
insert into eladasok values(107, 'Elelmiszer', 300, 40); -- ezt már nem tudja beszúrni, 40 > 39 

select * from eladasok;


-- Particionálás hash kulcs alapján
CREATE TABLE eladasok2 (szla_szam   NUMBER(5), 
                        szla_nev    CHAR(30), 
                        mennyiseg   NUMBER(6), 
                        het         INTEGER ) 
PARTITION BY HASH ( het )  
   (PARTITION part1 SEGMENT CREATION IMMEDIATE TABLESPACE users, 
    PARTITION part2 SEGMENT CREATION IMMEDIATE TABLESPACE example, 
    PARTITION part3 SEGMENT CREATION IMMEDIATE TABLESPACE users )
;
insert into eladasok2 select * from eladasok;

select * from eladasok2;


-- Particionálás lista alapján
CREATE TABLE eladasok3 (szla_szam   NUMBER(5), 
                        szla_nev    CHAR(30), 
                        mennyiseg   NUMBER(6), 
                        het         INTEGER ) 
PARTITION BY LIST ( het )  
   (PARTITION part1 VALUES(1,2,3,4,5)   SEGMENT CREATION IMMEDIATE 
      STORAGE(INITIAL 8K NEXT 8K) TABLESPACE users, 
    PARTITION part2 VALUES(6,7,8,9)     SEGMENT CREATION IMMEDIATE 
      STORAGE(INITIAL 8K NEXT 8K) TABLESPACE example, 
    PARTITION part3 VALUES(10,11,12,13) SEGMENT CREATION IMMEDIATE 
      STORAGE(INITIAL 8K NEXT 8K) TABLESPACE users ) -- ide sem tud beszúrni > 13-at
;
insert into eladasok3 select * from eladasok;

select * from eladasok3;


-- Alparticiók létrehozása partición belül (range-en belül hash)
CREATE TABLE eladasok4 (szla_szam   NUMBER(5), 
                        szla_nev    CHAR(30), 
                        mennyiseg   NUMBER(6), 
                        het         INTEGER ) 
PARTITION BY RANGE ( het )
SUBPARTITION BY HASH (mennyiseg)
SUBPARTITIONS 3  
   (PARTITION negyedev1  VALUES LESS THAN  ( 13 )  SEGMENT CREATION IMMEDIATE 
      STORAGE(INITIAL 8K NEXT 8K) TABLESPACE users, 
    PARTITION negyedev2  VALUES LESS THAN  ( 26 )  SEGMENT CREATION IMMEDIATE 
      STORAGE(INITIAL 8K NEXT 8K) TABLESPACE example, 
    PARTITION negyedev3  VALUES LESS THAN  ( 39 )  SEGMENT CREATION IMMEDIATE
      STORAGE(INITIAL 8K NEXT 8K) TABLESPACE users )
;
insert into eladasok4 select * from eladasok;


-- Range-list alparticiók létrehozása minta alapján. Ez akkor hasznos ha nagyon sok
-- partíció lenne, és így nem kell őket egyesével felsorolni
-- mintára vonatkozó infók: DBA_SUBPARTITION_TEMPLATES
CREATE TABLE eladasok5 (szla_szam   NUMBER(5), 
                        szla_nev    CHAR(30), 
                        mennyiseg   NUMBER(6), 
                        het         INTEGER ) 
PARTITION BY RANGE ( mennyiseg )
SUBPARTITION BY LIST (het)
SUBPARTITION TEMPLATE
  (SUBPARTITION lista VALUES(1,2,3,4,5), SUBPARTITION other VALUES(DEFAULT))
    (PARTITION kicsi    VALUES LESS THAN  (100) SEGMENT CREATION IMMEDIATE
       STORAGE(INITIAL 8K NEXT 8K) TABLESPACE users,
     PARTITION kozepes  VALUES LESS THAN  (500) SEGMENT CREATION IMMEDIATE  
       STORAGE(INITIAL 8K NEXT 8K) TABLESPACE example, 
     PARTITION nagy     VALUES LESS THAN  (MAXVALUE) SEGMENT CREATION IMMEDIATE 
       STORAGE(INITIAL 8K NEXT 8K) TABLESPACE users )
;
insert into eladasok5 select * from eladasok;
commit;
select * from eladasok5;



select * from user_tables order by table_name;

select * from user_objects order by object_name;

select * from user_segments order by segment_name;

select * from user_part_tables;

select * from user_tab_partitions;

select * from user_tab_subpartitions;

select * from user_ind_subpartitions;

select * from user_subpart_key_columns;

select * from dba_part_key_columns;

-- ab2_feladat5.txt

-- Cluster létrehozása (index cluster lesz):
CREATE CLUSTER personnel_cl (department_number NUMBER(2)) SIZE 4K;

-- Táblák létrehozása a clusteren:
CREATE TABLE emp_clt
  (empno NUMBER PRIMARY KEY, ename VARCHAR2(30), job VARCHAR2(27),
   mgr NUMBER(4), hiredate DATE, sal NUMBER(7,2), comm NUMBER(7,2), 
   deptno NUMBER(2) NOT NULL)
CLUSTER personnel_cl (deptno);
  
CREATE TABLE dept_clt
  (deptno NUMBER(2), dname VARCHAR2(42), loc VARCHAR2(39))
CLUSTER personnel_cl (deptno);

-- Index létrehozása (csak ezután lehet sorokat beszúrni):
CREATE INDEX personnel_cl_idx ON CLUSTER personnel_cl;
INSERT INTO emp_clt SELECT * FROM emp;
INSERT INTO dept_clt SELECT * FROM nikovits.dept;

SELECT rowid, ename ename_dname FROM emp_clt WHERE deptno=10
 UNION
SELECT rowid, dname FROM dept_clt WHERE deptno=10;

CREATE CLUSTER cikk_hcl (ckod  NUMBER ) SIZE 4K  HASHKEYS 30;
CREATE TABLE cikk_hclt(ckod NUMBER, cnev VARCHAR2(20), 
             szin VARCHAR2(15), suly FLOAT) 
CLUSTER cikk_hcl(ckod); 
INSERT INTO cikk_hclt select * from nikovits.cikk;


CREATE CLUSTER cikk_hcl2 (ckod  NUMBER ) HASHKEYS 30 HASH IS MOD(ckod, 53);
CREATE TABLE cikk_hcl2t(ckod NUMBER, cnev VARCHAR2(20), 
             szin VARCHAR2(15), suly FLOAT) 
CLUSTER cikk_hcl2(ckod); 
INSERT INTO cikk_hcl2t select * from nikovits.cikk;

CREATE CLUSTER cikk_hcl3 (ckod  NUMBER ) SINGLE TABLE HASHKEYS 30;

select * from user_clusters;

select * from user_tables;

select * from user_clu_columns;

select * from user_cluster_hash_expressions;

-- kötelező

select * from dba_segments
where owner = 'NIKOVITS';

CREATE OR REPLACE PROCEDURE empty_blocks(p_owner VARCHAR2, p_table VARCHAR2) IS
    v_empty int;
    v_qstring varchar(1000);
    v_blocks int;
    v_filled int;
begin
    select sum(blocks) into v_blocks
    from dba_segments
    where owner = upper(p_owner) and segment_name = upper(p_table);
    
    v_qstring := 'select sum(c) from ' || '(select count(distinct dbms_rowid.rowid_block_number(rowid)) c '
        || ' from ' || p_owner || '.' || p_table || ' group by dbms_rowid.rowid_relative_fno(rowid))';
        
    execute immediate v_qstring into v_filled;
    dbms_output.put_line('Empty Blocks: ' || (v_blocks - v_filled));
end;
/


SET SERVEROUTPUT ON
EXECUTE empty_blocks('nikovits','customers');
EXECUTE empty_blocks('nikovits','eladasok');

EXECUTE check_plsql('empty_blocks(''nikovits'', ''customers'')');
EXECUTE check_plsql('empty_blocks(''nikovits'', ''eladasok'')');


create table GYAK05 as select text from user_source where name = 'EMPTY_BLOCKS' order by line;

select * from gyak05;


